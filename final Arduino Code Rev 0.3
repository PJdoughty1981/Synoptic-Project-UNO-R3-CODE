//DOC STRING-----------------------------------------------------------------------//
//Arduino code for the UNO R3 Group 29  Peter Doughty : Programmer                 //
//02/06/2024 Rev 0.3                                                               //
//System will run three sensor checks on the press of the button                   //
//the values generated by the checks will light corresponding LED's & be saved to  //
//EEPROM (Electrically Erasable Programmable Read-Only Memory) for later download  //
//by a service technichian.  255 MAX writes of 4 bytes total over 1kb of space     //
//After download the system will erase the EEPROM and reset to startup values.     //
//automation is added to control power supply via RELAY to USB and lighting ports  //
//through PIN A5.                                                                  //
//---------------------------------------------------------------------------------//
//PINOUT                                                                           //
//  DIGITAL LED PINS- 2,3,4,5,6,7,8,9,11,12,13                                     //
//  ANALOG SENSOR INPUTS-  A0, A4 ,A2                                              //
//  RELAY CONTROL- A5                                                              //
//  BUTTON PIN- 10                                                                 //
//  EEPROM RESERVE ADDRESS = 0 for 2 bytes                                         //
//  EEPROM START ADDRESS = 2                                                       //
//  MAX EEPROM DATA WRITES = 255                                                   //
//---------------------------------------------------------------------------------//
// FUNCTION LIST                                                                   //
//  void EEPROMWriteInt  :  int EEPROMReadInt   (Write and read EEPROM bytes)      //
//  void(* resetFunc)  (soft reset)                                                //
//  void setup() (setup PIN's, Serial communication, current saved EEPROM address) //
//  void loop() (button functions,run sensor checks,run DATA download,clear EEPROM)//
//  void runWaterLevelLoop()    (Check water level in the Tank)                    //
//  void runWaterQualityLoop()  (Check water Quality)                              //
//  void runSystemVoltageLoop()  (Check system voltage and control power relay)    //
//  void turnOffAllLeds()  (turn off all LED's at once)                            //
//  void turnOnAllLeds()   (turn on all LED's at once)                             //
//  void writeEntry  :  void readEntry (code to read and write data to EEPROM)     //
//  void sendEEPROMData()  (transmit via serial, stored EEPROM DATA)               //
//  void clearEEPROM()  (Clear EEPROM and reset values)                            //
//---------------------------------------------------------------------------------//
//Sketch uses 6576 bytes (20%) of program storage space. Maximum is 32256 bytes.   //
//Global variables use 768 bytes (37%) of dynamic memory, leaving 1280 bytes for   //
//local variables. Maximum is 2048 bytes.                                          //
//---------------------------------------------------------------------------------//

#include <EEPROM.h>

// Function to write an integer to EEPROM
void EEPROMWriteInt(int address, int value, int size = 2) {
  if (size == 2) {  // assuming a 16bit integer
    byte two = (value & 0xFF); // The higher 8 bits of the integer.
    byte one = ((value >> 8) & 0xFF);  // The lower 8 bits of the integer.

    // Write the two bytes into the EEPROM at the specified address
    EEPROM.update(address, two);
    EEPROM.update(address + 1, one);
  } else if (size == 1) {
    byte one = value & 0xFF;  // Just taking 8bit single byte number better for space!

    // Write the one byte into the EEPROM at the address
    EEPROM.update(address, one);
  }
}

// Function to read an integer from EEPROM
int EEPROMReadInt(int address, int size = 2) {
  if (size == 2) {
    // Read the two bytes from the EEPROM at the specified address
    byte two = EEPROM.read(address);
    byte one = EEPROM.read(address + 1);

    // Combine the two bytes to form an integer
    return (one << 8) + two;
  } else if (size == 1) {
    // Read the one byte from the EEPROM at the specified address
    byte one = EEPROM.read(address);

    // Return the byte as an integer
    return one;
  }
  return 0;
}

// LED pins for water level indicator
const int greenLED = 7; // High level
const int yellowLED = 8; // Mid level
const int redLED = 9; // Low level

// LED pins for water quality indicator
const int qualityGreenLED = 2; // Good quality
const int qualityYellowLED1 = 3; // Ok level 3
const int qualityYellowLED2 = 4; // Ok level 2
const int qualityYellowLED3 = 5; // Ok level 1
const int qualityRedLED = 6; // Not ok

// Sensor inputs (analog pins)
const int Water_Level_Sensor = A0;
const int Water_Quality_Sensor = A4;
const int System_Voltage_Sensor = A2;

// USB power control pin
const int usbPowerControlPin1 = A5; // Control for USB port & lighting RELAY

// LED pins for battery level indicator
const int batteryGreenLED = 11; // Fully charged
const int batteryYellowLED = 12; // OK charge
const int batteryRedLED = 13; // Low charge

// Button pin
const int buttonPin = 10; // The pin for the single button

// Variables to manage button state
int lastButtonState = LOW; // the previous state of the button
int currentButtonState; // the current state of the button
unsigned long lastDebounceTime = 0; // the last time the button state was toggled
unsigned long debounceDelay = 50; // Variables for debounce of button
unsigned long lastButtonPressTime = 0; // Define a variable to track the last time the button was pressed

// EEPROM addresses for storing sensor values
const int indexAddress = 0; // Reserve the first 2 bytes of the EEPROM for the index
const int eepromStartAddress = 2; // Start storing entries after the index
int currentEEPROMIndex = 0; // current EEPROM index
const int maxEntries = 255; // 1024 - 2 = 1022 bytes for storing entries. 1022 / 4 = 255.5 
const int entrySize = 4; // Size of each entry (1 byte for water level, 2 bytes for system voltage, 1 byte for water quality)
const int bufferSize = maxEntries * entrySize; // Total size needed for the buffer

// Global Variables to store sensor readings for EEPROM writes
int waterLevel;
int systemVoltage;
int waterQuality;

void(* resetFunc) (void) = 0; //declare reset function @ address 0 

void setup() {
  Serial.println("Arduino STARTUP");
  // Initialize all the LED pins as outputs
  pinMode(greenLED, OUTPUT);
  pinMode(yellowLED, OUTPUT);
  pinMode(redLED, OUTPUT);
  pinMode(qualityGreenLED, OUTPUT);
  pinMode(qualityYellowLED1, OUTPUT);
  pinMode(qualityYellowLED2, OUTPUT);
  pinMode(qualityYellowLED3, OUTPUT);
  pinMode(qualityRedLED, OUTPUT);
  pinMode(batteryGreenLED, OUTPUT);
  pinMode(batteryYellowLED, OUTPUT);
  pinMode(batteryRedLED, OUTPUT);
  pinMode(usbPowerControlPin1, OUTPUT);
  
  // Initialize the button pin as an input with pullup resistor
  pinMode(buttonPin, INPUT_PULLUP);

  // Serial communication, important for the DATA download to COM port
  Serial.begin(9600);

  // Load the current index from the EEPROM
  currentEEPROMIndex = EEPROMReadInt(indexAddress);
}

void loop() {
  // Handle button press with debounce
  int reading = digitalRead(buttonPin);
  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }
  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading != currentButtonState) {
      currentButtonState = reading;
      if (currentButtonState == HIGH) {
        lastButtonPressTime = millis(); // Update the last button press time
        runWaterLevelLoop();
        runSystemVoltageLoop();
        runWaterQualityLoop();
         // Write all three values to EEPROM at the same index
        writeEntry(currentEEPROMIndex, waterLevel, systemVoltage, waterQuality);
        currentEEPROMIndex++; // Increment the EEPROM index
        // Reset the index when it reaches maxEntries
        if (currentEEPROMIndex >= maxEntries) {
          currentEEPROMIndex = 0;
        }
        EEPROMWriteInt(indexAddress, currentEEPROMIndex); // Update the index in the EEPROM
      }
    }
  }
  lastButtonState = reading;

  // Check if button is held down for 10 seconds
  if (currentButtonState == HIGH && millis() - lastButtonPressTime >= 10000) {
    turnOnAllLeds(); // Signal the send DATA phase
    sendEEPROMData(); // Send the recorded values from EEPROM through serial
    // Clear the EEPROM and reset the index
    clearEEPROM();
    lastButtonPressTime = millis(); // Reset lastButtonPressTime to avoid repeated transmissions
  }

  // Turn off all LEDs after they have been on for 4 seconds
  if (millis() - lastButtonPressTime >= 4000) {
    turnOffAllLeds();
  }
}

void runWaterLevelLoop() {
  // Read the value from the water level sensor (potentiometer)
  int waterLevelValue = analogRead(Water_Level_Sensor);
  int waterLevelPercentage = map(waterLevelValue, 0, 1023, 0, 100);

  // Determine the water level and light the appropriate LED
  if (waterLevelPercentage >= 75) {
    // High water level
    digitalWrite(greenLED, HIGH);
    Serial.println("Tank Water Level = HIGH");
    waterLevel = 4;
  } else if (waterLevelPercentage >= 50) {
    // Mid water level
    digitalWrite(yellowLED, HIGH);
    Serial.println("Tank Water Level = MEDIUM");
    waterLevel = 3;
  } else if (waterLevelPercentage >= 25) {
    // Low water level
    digitalWrite(redLED, HIGH);
    Serial.println("Tank Water Level = LOW");
    waterLevel = 2;
  } else {
    // Very low water level 
    digitalWrite(redLED, HIGH); 
    Serial.println("Tank Water Level = VERY LOW");
    waterLevel = 1;
  }
  // Print the water level for debugging
  Serial.print("Water Level (Global Variable): "); //Debug code
  Serial.println(waterLevel);
}

void runWaterQualityLoop() {
  int sensorValue = analogRead(Water_Quality_Sensor);

  // Define the thresholds for the water quality ranges
  int thresholds[5] = {204, 409, 614, 819, 1023};

  // Light up the corresponding LEDs based on water quality
  if (sensorValue < thresholds[0]) {
    digitalWrite(qualityRedLED, HIGH);
    Serial.println("Water Quality: Bad");
    waterQuality = 1;
  } else if (sensorValue < thresholds[1]) {
    digitalWrite(qualityYellowLED3, HIGH);
    digitalWrite(qualityRedLED, HIGH);
    Serial.println("Water Quality: Poor");
    waterQuality = 2;
  } else if (sensorValue < thresholds[2]) {
    digitalWrite(qualityYellowLED2, HIGH);
    digitalWrite(qualityYellowLED3, HIGH);
    digitalWrite(qualityRedLED, HIGH);
    Serial.println("Water Quality: Fair");
    waterQuality = 3;
  } else if (sensorValue < thresholds[3]) {
    digitalWrite(qualityYellowLED1, HIGH);
    digitalWrite(qualityYellowLED2, HIGH);
    digitalWrite(qualityYellowLED3, HIGH);
    Serial.println("Water Quality: Good");
    waterQuality = 4;
  } else {
    digitalWrite(qualityGreenLED, HIGH);
    digitalWrite(qualityYellowLED1, HIGH);
    digitalWrite(qualityYellowLED2, HIGH);
    digitalWrite(qualityYellowLED3, HIGH);
    Serial.println("Water Quality: Excellent");
    waterQuality = 5;
  }
  // Print the water Quality for debugging
  Serial.print("Water Quality (Global Variable): "); //Debug code
  Serial.println(waterQuality);
}

void runSystemVoltageLoop() {
  // Read the value from the system voltage sensor
  int systemVoltageValue = analogRead(System_Voltage_Sensor);

  // Map the reading to a voltage (10.2 - 13.2V):
  float simulatedVoltage = map(systemVoltageValue, 0, 1023, 102, 132) / 10.0;

  // Check the simulated voltage and light the appropriate LED
  if (simulatedVoltage >= 12.6) {
    // Battery is in good condition (>= 12.6V)
    digitalWrite(usbPowerControlPin1, HIGH); // Turn on USB power
    digitalWrite(batteryGreenLED, HIGH);
    digitalWrite(batteryYellowLED, LOW);
    digitalWrite(batteryRedLED, LOW);
    Serial.print("Battery Voltage: ");
    Serial.print(simulatedVoltage);
    Serial.println("V - Good Condition");
    Serial.println("USB POWER ON");
  } else if (simulatedVoltage > 11.4) {
    // Battery is in medium condition (> 11.4V and < 12.6V)
    digitalWrite(batteryYellowLED, HIGH);
    digitalWrite(batteryGreenLED, LOW);
    digitalWrite(batteryRedLED, LOW);
    Serial.print("Battery Voltage: ");
    Serial.print(simulatedVoltage);
    Serial.println("V - Medium Condition");
  } else {
    // Battery is in poor condition (<= 11.4V)
    digitalWrite(usbPowerControlPin1, LOW); // Turn off USB power
    digitalWrite(batteryRedLED, HIGH);
    digitalWrite(batteryGreenLED, LOW);
    digitalWrite(batteryYellowLED, LOW);
    Serial.print("Battery Voltage: ");
    Serial.print(simulatedVoltage);
    Serial.println("V - Poor Condition");
    Serial.println("USB POWER OFF");
  }
  // Convert the float to a 4-digit integer
  systemVoltage = (int)(simulatedVoltage * 100);
  // Print the water level for debugging
  Serial.print("System Voltage (Global Variable): "); //Debug code
  Serial.println(systemVoltage);
}
// Functions to turn ALL LED's OFF and ON
void turnOffAllLeds() {
  digitalWrite(greenLED, LOW);
  digitalWrite(yellowLED, LOW);
  digitalWrite(redLED, LOW);
  digitalWrite(qualityGreenLED, LOW);
  digitalWrite(qualityYellowLED1, LOW);
  digitalWrite(qualityYellowLED2, LOW);
  digitalWrite(qualityYellowLED3, LOW);
  digitalWrite(qualityRedLED, LOW);
  digitalWrite(batteryGreenLED, LOW);
  digitalWrite(batteryYellowLED, LOW);
  digitalWrite(batteryRedLED, LOW);
}

void turnOnAllLeds() {
  digitalWrite(greenLED, HIGH);
  digitalWrite(yellowLED, HIGH);
  digitalWrite(redLED, HIGH);
  digitalWrite(qualityGreenLED, HIGH);
  digitalWrite(qualityYellowLED1, HIGH);
  digitalWrite(qualityYellowLED2, HIGH);
  digitalWrite(qualityYellowLED3, HIGH);
  digitalWrite(qualityRedLED, HIGH);
  digitalWrite(batteryGreenLED, HIGH);
  digitalWrite(batteryYellowLED, HIGH);
  digitalWrite(batteryRedLED, HIGH);
}

void writeEntry(int index, int waterLevel, int systemVoltage, int waterQuality) {
  int address = eepromStartAddress + (index % maxEntries) * entrySize;
  Serial.print("Writing entry at index "); //Debug code
  Serial.print(index);
  Serial.print(", EEPROM address ");
  Serial.println(address);
  EEPROMWriteInt(address, waterLevel, 1); // Water level is 1 byte
  EEPROMWriteInt(address + 1, systemVoltage, 2); // System voltage is 2 bytes
  EEPROMWriteInt(address + 3, waterQuality, 1); // Water quality is 1 byte
  Serial.println(waterLevel);   // Debug code
  Serial.println(systemVoltage);
  Serial.println(waterQuality);
}

// Function to read an entry from the EEPROM at a specific index
void readEntry(int index, int &waterLevel, int &systemVoltage, int &waterQuality) {
  int address = eepromStartAddress + (index % maxEntries) * entrySize;
  waterLevel = EEPROMReadInt(address, 1); // Water level is 1 byte
  systemVoltage = EEPROMReadInt(address + 1, 2); // System voltage is 2 bytes
  waterQuality = EEPROMReadInt(address + 3, 1); // Water quality is 1 byte
}

// Function to send all entries over serial here we also change system values for unique systems
void sendEEPROMData() {
  Serial.println("BEGIN_OF_EEPROM_DATA");
  Serial.println("System 007"); // EDITABLE Unique system number for data collection
  for (int i = 0; i < maxEntries; i++) {
    int waterLevel, systemVoltage, waterQuality;
    readEntry(i, waterLevel, systemVoltage, waterQuality);
    Serial.print(waterLevel);
    Serial.print(",");
    Serial.print(systemVoltage);
    Serial.print(",");
    Serial.println(waterQuality);
  }
  Serial.println("END_OF_EEPROM_DATA");
  turnOffAllLeds();
}

// Function to clear the EEPROM
void clearEEPROM() {
  Serial.println("ERASING EEPROM & RESETTING");
  for (int i = eepromStartAddress; i < bufferSize; i++) {
    EEPROM.write(i, 0);
  }
  // Reset the currentEEPROMIndex to 0
  currentEEPROMIndex = 0;
  // Reset the EEPROM index stored in the indexAddress to 0
  EEPROMWriteInt(indexAddress, currentEEPROMIndex);
  resetFunc();  //call reset 
}
